package it.telecom.business.login.bean;

import it.telecom.business.login.impl.LoginUserBL;
import it.telecom.business.login.service.ILoginUserBL;
import it.telecom.business.login.util.PasswordValidator;
import it.telecom.business.util.EncoderUtil;
import it.telecom.integration.dao.generated.IUserDAO;
import it.telecom.integration.dao.generated.User;
import it.telecom.integration.dao.generated.UserDAO;

import java.io.Serializable;

public class UserChangePasswordFormBean implements Serializable{
	
	private Integer idUser;
	private String oldPassword;
	private String newPassword;
	private String confirmNewPassword;
	private User user;

	public UserChangePasswordFormBean(Integer idUser, String oldPassword,
			String newPassword, String confirmNewPassword) {
		super();
		this.idUser = idUser;
		this.oldPassword = oldPassword;
		this.newPassword = newPassword;
		this.confirmNewPassword = confirmNewPassword;
		IUserDAO iUserDAO = new UserDAO();
		user = iUserDAO.findById(idUser);
	}
	
	public Integer getIdUser() {
		return idUser;
	}
	
	public void setIdUser(Integer idUser) {
		this.idUser = idUser;
	}

	public User getUser() {
		return user;
	}

	public void setUser(User user) {
		this.user = user;
	}

	public void setConfirmNewPassword(String confirmNewPassword) {
		this.confirmNewPassword = confirmNewPassword;
	}
	
	
	public String validate () throws Exception{
		String errorMessage = null;
		PasswordValidator passwordValidator = new PasswordValidator();
		ILoginUserBL iLoginUserBL=new LoginUserBL();
		//Boolean flag = iLoginUserBL.pswControl(idUser, newPassword);
		if(oldPassword==null){
//			errorMessage = "Old password is required!";
			errorMessage = "La vecchia password è obbligatoria!";
		}else if(!user.getPassword().equals(EncoderUtil.getMD5EncodedString(oldPassword))){
//			errorMessage = "Wrong old password!";
			errorMessage = "La vecchia password è errata!";
		}else if(newPassword==null){
//			errorMessage = "New password is required!";
			errorMessage = "La nuova password è obbligatoria!";
		}else if(confirmNewPassword==null){
			errorMessage = "Confirm new password is required!";
			errorMessage = "La nuova password è obbligatoria!";
		}else if(newPassword.equals(oldPassword)){
//			errorMessage = "New password must be different from the old password!";
			errorMessage = "La nuova password deve essere diversa dalla vecchia password!";
		}else if(!confirmNewPassword.equals(newPassword)){
//			errorMessage = "The Confirm New Password must match the New Password!";
			errorMessage = "Le due nuove password non coincidono";
		}else if(!passwordValidator.validate(newPassword)){
//			errorMessage = "Password must be between " +
//			"6 to 20 characters " +
//			"with at least one digit, " +
////			"one upper case letter, " +
//			"one lower case letter " +
//			"and one special symbol ( e.g. @;#$% )";
			errorMessage = "La password deve contenere " +
			"tra 6 e 20 caratteri," +
			" almeno un numero," +
//			" one upper case letter, " +
			" una lettera minuscola" +
			" ed un simbolo speciale( es. @;#$% )";
		}else if(iLoginUserBL.pswControl(idUser, newPassword)){
			errorMessage = "Password gi&#224; impostata dall&#39;utente";
		}
		return errorMessage;
	}
	
	
	public String getOldPassword() {
		return oldPassword;
	}
	public void setOldPassword(String oldPassword) {
		this.oldPassword = oldPassword;
	}
	public String getNewPassword() {
		return newPassword;
	}
	public void setNewPassword(String newPassword) {
		this.newPassword = newPassword;
	}
	public String getConfirmNewPassword() {
		return confirmNewPassword;
	}
	public void setConfirmNewPassord(String confirmNewPassword) {
		this.confirmNewPassword = confirmNewPassword;
	}
	
	
	

}
