package it.telecom.presentation.action.servicestatus;

import it.telecom.business.network.impl.NetworkBL;
import it.telecom.business.network.service.INetworkBL;
import it.telecom.business.servicestatus.impl.ServiceBL;
import it.telecom.business.servicestatus.service.IServiceBL;
import it.telecom.integration.dao.generated.EntityManagerHelper;
import it.telecom.integration.dao.generated.Network;
import it.telecom.integration.dao.util.IServiceConstants;
import it.telecom.presentation.action.util.HttpServletResponseUtil;
import it.telecom.presentation.action.util.IErrorMessageConstants;
import it.telecom.presentation.action.util.SecurityUtil;

import java.util.Calendar;
import java.util.Date;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.json.JSONArray;
import org.json.JSONObject;

public class SummaryServiceStatusAction extends Action{
	
	private static final Log log = LogFactory.getLog(SummaryServiceStatusAction.class);

@Override
	public ActionForward execute(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
	throws Exception {
		final String method = "execute";

		try {
			List<Integer> enabledNetworkFunctionList = SecurityUtil.getEnabledNetworkFunctionList(request);

			JSONObject result = new JSONObject();
			JSONArray records = new JSONArray();
			
			IServiceBL iServiceBL = new ServiceBL();
			INetworkBL iNetworkBL = new NetworkBL();

			Calendar calendar = Calendar.getInstance();
			Date currentDate = calendar.getTime();

			
			List<Network> net = iNetworkBL.findAll(enabledNetworkFunctionList);
			
			Long critical=null;
			Long major=null;
			Long normal=null;
			Long suspended=null;

			for (Network iNet : net) {

				JSONObject netRecord = new JSONObject();
				critical = iServiceBL.getTotalServiceByStatus(enabledNetworkFunctionList, iNet.getId() ,currentDate, IServiceConstants.CRITICAL);
				major = iServiceBL.getTotalServiceByStatus(enabledNetworkFunctionList, iNet.getId(), currentDate, IServiceConstants.MAJOR);
				normal = iServiceBL.getTotalServiceByStatus(enabledNetworkFunctionList,iNet.getId(), currentDate, IServiceConstants.NORMAL);
				suspended = iServiceBL.getTotalServiceByStatus(enabledNetworkFunctionList,iNet.getId(), currentDate, IServiceConstants.SUSPENDED);

				netRecord.put("networkDescr", iNet.getDescription());
				netRecord.put(IServiceConstants.CRITICAL, critical);
				netRecord.put(IServiceConstants.MAJOR, major);
				netRecord.put(IServiceConstants.NORMAL,normal);
				netRecord.put(IServiceConstants.SUSPENDED,suspended);
				records.put(netRecord);
			}
			
			result.put("root", records);
			result.put("threadid",Thread.currentThread().getId());

			HttpServletResponseUtil.setJsonResponse(response);

			response.getOutputStream().println(result.toString());
			response.flushBuffer();
		} catch (Exception e) {
			log.error(method,e);
			response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR,IErrorMessageConstants.INTERNAL_SERVER_ERROR);
		}
		finally{
			EntityManagerHelper.closeEntityManager();
		}
		return null;
	}


}
