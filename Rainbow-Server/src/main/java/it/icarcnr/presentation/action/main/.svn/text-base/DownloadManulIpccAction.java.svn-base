/**
 * 
 */
package it.telecom.presentation.action.main;

import it.telecom.business.config.util.IApplicationGlobalConstants;
import it.telecom.integration.dao.generated.EntityManagerHelper;
import it.telecom.presentation.action.util.IErrorMessageConstants;

import java.io.File;
import java.io.FileInputStream;

import javax.servlet.ServletOutputStream;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

/**
 * @author Faber
 *
 */
public class DownloadManulIpccAction extends Action {
	
	private  static final Log log = LogFactory.getLog(DownloadManulIpccAction.class);

	@Override
	public ActionForward execute(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
	throws Exception {
		final String method = "execute";
			

		try {
			response.reset();		
			response.setContentType("application/pdf");
			response.setHeader("Content-disposition","attachment; filename= \"ManualeContactCenter.pdf\"");

			String path = IApplicationGlobalConstants.VASMONCAT_MANUAL_ABSOLUTE_PATH + File.separator + "ManualeContactCenter.pdf";
//			String path = "C:"+ File.separator + "ManualeContactCenter.pdf";
			
			FileInputStream  inputStream = new FileInputStream(path);
		    byte buf[]=new byte[1024];
		    int len;
			ServletOutputStream servletOutputStream = response.getOutputStream();
		    while((len=inputStream.read(buf))>0){
		    	servletOutputStream.write(buf,0,len);
		    }

		    servletOutputStream.flush();
		    servletOutputStream.close();
		    inputStream.close();

			response.flushBuffer();

		} catch (Exception e) {
			log.error(method,e);
			response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR,IErrorMessageConstants.INTERNAL_SERVER_ERROR);
		}
		finally{
			EntityManagerHelper.closeEntityManager();
		}
		return null;
	}

}
