package it.telecom.integration.dao.generated;

import java.util.Date;
import java.util.HashSet;
import java.util.Set;
import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import static javax.persistence.GenerationType.IDENTITY;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.MappedSuperclass;
import javax.persistence.OneToMany;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

/**
 * AbstractUser entity provides the base persistence definition of the User
 * entity. @author MyEclipse Persistence Tools
 */
@MappedSuperclass
public abstract class AbstractUser implements java.io.Serializable {

	// Fields

	private Integer id;
	private Group group;
	private String name;
	private String surname;
	private String companyId;
	private Boolean enabled;
	private String username;
	private String password;
	private Date expire;
	private Set<Cronjob> cronjobs = new HashSet<Cronjob>(0);
	private Set<UserPassword> userPasswords = new HashSet<UserPassword>(0);
	private Set<Job> jobs = new HashSet<Job>(0);

	// Constructors

	/** default constructor */
	public AbstractUser() {
	}

	/** minimal constructor */
	public AbstractUser(String name, String surname, String companyId,
			Boolean enabled, String username, String password) {
		this.name = name;
		this.surname = surname;
		this.companyId = companyId;
		this.enabled = enabled;
		this.username = username;
		this.password = password;
	}

	/** full constructor */
	public AbstractUser(Group group, String name, String surname,
			String companyId, Boolean enabled, String username,
			String password, Date expire, Set<Cronjob> cronjobs,
			Set<UserPassword> userPasswords, Set<Job> jobs) {
		this.group = group;
		this.name = name;
		this.surname = surname;
		this.companyId = companyId;
		this.enabled = enabled;
		this.username = username;
		this.password = password;
		this.expire = expire;
		this.cronjobs = cronjobs;
		this.userPasswords = userPasswords;
		this.jobs = jobs;
	}

	// Property accessors
	@Id
	@GeneratedValue(strategy = IDENTITY)
	@Column(name = "ID", unique = true, nullable = false)
	public Integer getId() {
		return this.id;
	}

	public void setId(Integer id) {
		this.id = id;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "ID_Group")
	public Group getGroup() {
		return this.group;
	}

	public void setGroup(Group group) {
		this.group = group;
	}

	@Column(name = "name", nullable = false, length = 45)
	public String getName() {
		return this.name;
	}

	public void setName(String name) {
		this.name = name;
	}

	@Column(name = "surname", nullable = false, length = 45)
	public String getSurname() {
		return this.surname;
	}

	public void setSurname(String surname) {
		this.surname = surname;
	}

	@Column(name = "company_id", nullable = false, length = 45)
	public String getCompanyId() {
		return this.companyId;
	}

	public void setCompanyId(String companyId) {
		this.companyId = companyId;
	}

	@Column(name = "enabled", nullable = false)
	public Boolean getEnabled() {
		return this.enabled;
	}

	public void setEnabled(Boolean enabled) {
		this.enabled = enabled;
	}

	@Column(name = "username", nullable = false, length = 45)
	public String getUsername() {
		return this.username;
	}

	public void setUsername(String username) {
		this.username = username;
	}

	@Column(name = "password", nullable = false, length = 45)
	public String getPassword() {
		return this.password;
	}

	public void setPassword(String password) {
		this.password = password;
	}

	@Temporal(TemporalType.DATE)
	@Column(name = "expire", length = 10)
	public Date getExpire() {
		return this.expire;
	}

	public void setExpire(Date expire) {
		this.expire = expire;
	}

	@OneToMany(cascade = CascadeType.ALL, fetch = FetchType.LAZY, mappedBy = "user")
	public Set<Cronjob> getCronjobs() {
		return this.cronjobs;
	}

	public void setCronjobs(Set<Cronjob> cronjobs) {
		this.cronjobs = cronjobs;
	}

	@OneToMany(cascade = CascadeType.ALL, fetch = FetchType.LAZY, mappedBy = "user")
	public Set<UserPassword> getUserPasswords() {
		return this.userPasswords;
	}

	public void setUserPasswords(Set<UserPassword> userPasswords) {
		this.userPasswords = userPasswords;
	}

	@OneToMany(cascade = CascadeType.ALL, fetch = FetchType.LAZY, mappedBy = "user")
	public Set<Job> getJobs() {
		return this.jobs;
	}

	public void setJobs(Set<Job> jobs) {
		this.jobs = jobs;
	}

}