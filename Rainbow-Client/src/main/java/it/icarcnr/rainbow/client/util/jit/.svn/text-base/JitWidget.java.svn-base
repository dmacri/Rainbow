package it.telecom.vmc.client.util.jit;

import java.util.LinkedHashMap;
import java.util.Map;

import com.google.gwt.core.client.GWT;
import com.google.gwt.core.client.JavaScriptObject;
import com.google.gwt.dom.client.Document;
import com.google.gwt.dom.client.NativeEvent;
import com.google.gwt.event.logical.shared.HasResizeHandlers;
import com.google.gwt.event.logical.shared.ResizeEvent;
import com.google.gwt.event.logical.shared.ResizeHandler;
import com.google.gwt.event.shared.HandlerRegistration;
import com.google.gwt.json.client.JSONNumber;
import com.google.gwt.json.client.JSONObject;
import com.google.gwt.user.client.DOM;
import com.google.gwt.user.client.Element;
import com.google.gwt.user.client.History;
import com.google.gwt.user.client.Window;
import com.google.gwt.user.client.ui.Widget;


public abstract class JitWidget extends Widget implements 	ResizeHandler,
															HasResizeHandlers, 
															HasClickLabelHandlers,
															HasMouseOverLabelHandlers, HasMouseOutLabelHandlers,
															HasBeforeComputeHandlers,
															HasAfterComputeHandlers{

	public JitWidget(String name, JavaScriptObject config) {
		this.name = name;
		this.config = config;

		//		Element logElement = DOM.createElement("div");
		//		DOM.setElementProperty(logElement, "id", "log");

		final Element domElement = DOM.createElement("div");
		DOM.setElementProperty(domElement, "id", name);
		setElement(domElement);

		//		domElement.setInnerHTML("<div id=\"log\"></div>");
		//		getElement().setInnerHTML("<div id=\"log\"></div>");

//		backgroundColor = 0 < DOM.getStyleAttribute(domElement, "backgroundColor").length() ? 
//				DOM.getStyleAttribute(getElement(), "backgroundColor") : defaultBackgroundColor;
//				DOM.setStyleAttribute(domElement, "backgroundColor", backgroundColor);
		
				
		backgroundColor = "#ECECEC";
		DOM.setStyleAttribute(domElement, "backgroundColor", backgroundColor);
		DOM.setStyleAttribute(domElement, "backgroundImage", "url(images/custom/telecom_background.gif)");
		DOM.setStyleAttribute(domElement, "backgroundPosition", "right top");
		DOM.setStyleAttribute(domElement, "backgroundRepeat", "no-repeat");
				
		jitgwtwrappers.put(name, this);
	}

	public String getName() {
		return name;
	}

	public JavaScriptObject getClickedNode() {
		return node;
	}

	public JavaScriptObject getClickedLabel() {
		return label;
	}

	@Override
	protected void onAttach() {
		setSize("100%", "100%");
		JSONObject configJSON = new JSONObject(config);
		configJSON.put("width", new JSONNumber(canvasWidth));
		configJSON.put("height", new JSONNumber(canvasHeight));
		JavaScriptObject jit = init(configJSON.getJavaScriptObject());
//		JavaScriptObject jit = init(config);
		jitwrappedobjects.put(name, jit);
		super.onAttach();
	}

	@Override
	public void onResize(ResizeEvent event) {
		canvasWidth = event.getWidth();
		canvasHeight = event.getHeight();
		if(isAttached()){
			//			double width = event.getWidth();
			//			double height = event.getHeight();
			//			double percentagex = width / oldWidth;
			//			double percentagey = height / oldHeight;
			//			double w = getOffsetWidth() * percentagex;
			//			double h = getOffsetHeight() * percentagey;

//			double w = event.getWidth();
//			double h = event.getHeight();
//			oldHeight
			setPixelSize((int) canvasWidth, (int) canvasHeight);
//			setSize("100%", "100%");
			resize(name, canvasWidth, canvasHeight);
		}
	}

	public void onResize(int adjWidth, int adjHeight, int rawWidth, int rawHeight) {
		double percentagex = adjWidth / rawWidth;
		double percentagey = adjHeight / rawHeight;
		double w = getOffsetWidth() * percentagex;
		double h = getOffsetHeight() * percentagey;
		setPixelSize((int) w, (int) h);
		resize(name, w, h);
	}

	protected abstract JavaScriptObject init(JavaScriptObject config);

	private final native void resize(String name, double w, double h) /*-{
        var jit = jitWrappedObject(name);
		if(typeof jit == "undefined"){
		}else{
			jit.canvas.resize(w, h);
        	jit.refresh();
        	jit.controller.onAfterCompute();
		}
    }-*/;

	public final static void resizeAll(ResizeEvent event) {
		for (JitWidget jit : jitgwtwrappers.values()) {
			jit.onResize(event);
		}
		canvasWidth = event.getWidth();
		canvasHeight = event.getHeight();
	}


	@Override
	public HandlerRegistration addResizeHandler(ResizeHandler handler){
		return addHandler(handler, ResizeEvent.getType());
	}

	@Override
	public HandlerRegistration addClickLabelHandler(ClickLabelHandler handler) {
		return addHandler(handler, ClickLabelEvent.getType());
	}

	@Override
	public HandlerRegistration addMouseOverLabelHandler(MouseOverLabelHandler handler) {
		return addHandler(handler, MouseOverLabelEvent.getType());
	}

	@Override
	public HandlerRegistration addMouseOutLabelHandler(MouseOutLabelHandler handler) {
		return addHandler(handler, MouseOutLabelEvent.getType());
	}

	@Override
	public HandlerRegistration addBeforeComputeHandler(BeforeComputeHandler handler)  {
		return addHandler(handler, BeforeComputeEvent.getType());
	}

	@Override
	public HandlerRegistration addAfterComputeHandler(AfterComputeHandler handler)  {
		return addHandler(handler, AfterComputeEvent.getType());
	}


	private final void setClickedNode(JavaScriptObject node) {
		this.node = node;
	}

	private final void setClickedLabel(JavaScriptObject label) {
		JSONObject json = new JSONObject(label);
		this.label = label;
	}

	@SuppressWarnings("unused")
	private final static JavaScriptObject getWrappedObject(String name) {
		return jitwrappedobjects.get(name);
	}


	@SuppressWarnings("unused")
	private final static void forwardEvent(String name, JavaScriptObject event, JavaScriptObject label,
			JavaScriptObject node) {
		NativeEvent received = (NativeEvent) (null == event ? null : event.cast());
		Document document = Document.get();
		JitWidget jit = jitgwtwrappers.get(name);
		jit.setClickedLabel(label);
		jit.setClickedNode(node);
		String type = null == received ? "click" : received.getType();
		if ("click".equals(type)) {
			JSONObject nodeobject = new JSONObject(node);
			String nodeid = nodeobject.get("id").toString();
			nodeid = nodeid.substring(1, nodeid.length() - 1);
			History.newItem(name + ";" + nodeid);
			ClickLabelEvent.fire(jit, false);
		} else if ("contextmenu".equals(type)) {
			ClickLabelEvent.fire(jit, true);
		} else if ("mouseover".equals(type)) {
			MouseOverLabelEvent.fire(jit, received);
		} else if ("mouseout".equals(type)) {
			MouseOutLabelEvent.fire(jit, received);
		} else {
			GWT.log("not handled: " + type, null);
		}
	}

	@SuppressWarnings("unused")
	private final static void forwardEvent(String name, JavaScriptObject event, JavaScriptObject node) {
		JSONObject received = new JSONObject(event);
		Document document = Document.get();
		JitWidget jit = jitgwtwrappers.get(name);
		String type = received.get("type").isString().stringValue();
		if ("beforeCompute".equals(type)) {
			BeforeComputeEvent.fire(jit);
		}else if ("afterCompute".equals(type)) {
			AfterComputeEvent.fire(jit);
		}else {
			GWT.log("not handled: " + type, null);
		}
	}

	private final static native void exportToJavaScript() /*-{
        jitWrappedObject = @it.telecom.vmc.client.util.jit.JitWidget::getWrappedObject(Ljava/lang/String;);
        jitWrapperForwardEvent = @it.telecom.vmc.client.util.jit.JitWidget::forwardEvent(Ljava/lang/String;Lcom/google/gwt/core/client/JavaScriptObject;Lcom/google/gwt/core/client/JavaScriptObject;Lcom/google/gwt/core/client/JavaScriptObject;);
        jitWrapperForwardComputeEvent = @it.telecom.vmc.client.util.jit.JitWidget::forwardEvent(Ljava/lang/String;Lcom/google/gwt/core/client/JavaScriptObject;Lcom/google/gwt/core/client/JavaScriptObject;);

    }-*/;

	static {
		exportToJavaScript();
		canvasWidth = Window.getClientWidth();
		canvasHeight = Window.getClientHeight();
	}

	private final String name;
	private final JavaScriptObject config;
	private final String backgroundColor;
	private JavaScriptObject node;
	private JavaScriptObject label;
	private static final String defaultBackgroundColor = "#fff";
	private static final Map<String,JavaScriptObject> jitwrappedobjects = new LinkedHashMap<String,JavaScriptObject>();
	private static final Map<String,JitWidget> jitgwtwrappers = new LinkedHashMap<String,JitWidget>();
	private static double canvasWidth;
	private static double canvasHeight;

}
